{"meta":{"title":"SmartSageQuZz's Blog","subtitle":"blog","description":"一个博客","author":"SmartSageQuZz","url":"http://quweb.xyz","root":"/"},"pages":[{"title":"关于","date":"1970-01-01T00:00:02.024Z","updated":"2024-08-06T10:22:50.986Z","comments":true,"path":"about/index.html","permalink":"http://quweb.xyz/about/index.html","excerpt":"","text":""},{"title":"","date":"2024-08-07T07:16:58.179Z","updated":"2024-08-07T07:16:58.179Z","comments":true,"path":"css/custom.css","permalink":"http://quweb.xyz/css/custom.css","excerpt":"","text":":root { --trans-light: rgba(255, 255, 255, 0.88); --trans-dark: rgba(25, 25, 25, 0.88); --border-style: 1px solid rgb(169, 169, 169); --backdrop-filter: none; /* blur(5px) saturate(150%); */ } @import \"//at.alicdn.com/t/font_2264842_b004iy0kk2b.css\"; /* 页脚与头图透明 */ #footer { background: transparent !important; } #page-header { background: transparent !important; } /* 白天模式遮罩透明 */ #footer::before { background: transparent !important; } #page-header::before { background: transparent !important; } /* 夜间模式遮罩透明 */ [data-theme=\"dark\"] #footer::before { background: transparent !important; } [data-theme=\"dark\"] #page-header::before { background: transparent !important; } /* 小冰分类分类磁铁黑夜模式适配 */ /* 一般状态 */ [data-theme=\"dark\"] .magnet_link_context { background: #1e1e1e; color: antiquewhite; } /* 鼠标悬浮状态 */ [data-theme=\"dark\"] .magnet_link_context:hover { background: #3ecdf1; color: #f2f2f2; } /*字体配置*/ @font-face { /* 为载入的字体取名字(随意) */ font-family: 'CEJK'; /* 字体文件地址(相对或者绝对路径都可以) */ src: url(/font/仓耳今楷03-W04.ttf); /* 定义加粗样式(加粗多少) */ font-weight: normal; /* 定义字体样式(斜体/非斜体) */ font-style: normal; /* 定义显示样式 */ font-display: block; } /* 翻页按钮居中 */ #pagination { width: 100%; margin: auto; } /* 霓虹灯 */ /* 日间模式不生效 */ [data-theme=\"light\"] #site-name, [data-theme=\"light\"] #site-title, [data-theme=\"light\"] #site-subtitle, [data-theme=\"light\"] #post-info { animation: none; } /* 夜间模式生效 */ [data-theme=\"dark\"] #site-name, [data-theme=\"dark\"] #site-title { animation: light_15px 10s linear infinite; } [data-theme=\"dark\"] #site-subtitle { animation: light_10px 10s linear infinite; } [data-theme=\"dark\"] #post-info { animation: light_5px 10s linear infinite; } /* 关键帧描述 */ @keyframes light_15px { 0% { text-shadow: #5636ed 0 0 15px; } 12.5% { text-shadow: #11ee5e 0 0 15px; } 25% { text-shadow: #f14747 0 0 15px; } 37.5% { text-shadow: #f1a247 0 0 15px; } 50% { text-shadow: #f1ee47 0 0 15px; } 50% { text-shadow: #b347f1 0 0 15px; } 62.5% { text-shadow: #002afa 0 0 15px; } 75% { text-shadow: #ed709b 0 0 15px; } 87.5% { text-shadow: #39c5bb 0 0 15px; } 100% { text-shadow: #5636ed 0 0 15px; } } @keyframes light_10px { 0% { text-shadow: #5636ed 0 0 10px; } 12.5% { text-shadow: #11ee5e 0 0 10px; } 25% { text-shadow: #f14747 0 0 10px; } 37.5% { text-shadow: #f1a247 0 0 10px; } 50% { text-shadow: #f1ee47 0 0 10px; } 50% { text-shadow: #b347f1 0 0 10px; } 62.5% { text-shadow: #002afa 0 0 10px; } 75% { text-shadow: #ed709b 0 0 10px; } 87.5% { text-shadow: #39c5bb 0 0 10px; } 100% { text-shadow: #5636ed 0 0 10px; } } @keyframes light_5px { 0% { text-shadow: #5636ed 0 0 5px; } 12.5% { text-shadow: #11ee5e 0 0 5px; } 25% { text-shadow: #f14747 0 0 5px; } 37.5% { text-shadow: #f1a247 0 0 15px; } 50% { text-shadow: #f1ee47 0 0 5px; } 50% { text-shadow: #b347f1 0 0 5px; } 62.5% { text-shadow: #002afa 0 0 5px; } 75% { text-shadow: #ed709b 0 0 5px; } 87.5% { text-shadow: #39c5bb 0 0 5px; } 100% { text-shadow: #5636ed 0 0 5px; } } /* 侧边栏个人信息卡片动态渐变色 */ #aside-content > .card-widget.card-info { background: linear-gradient( -45deg, #e8d8b9, #eccec5, #a3e9eb, #bdbdf0, #eec1ea ); box-shadow: 0 0 5px rgb(66, 68, 68); position: relative; background-size: 400% 400%; -webkit-animation: Gradient 10s ease infinite; -moz-animation: Gradient 10s ease infinite; animation: Gradient 10s ease infinite !important; } @-webkit-keyframes Gradient { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } } @-moz-keyframes Gradient { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } } @keyframes Gradient { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } } /* 黑夜模式适配 */ [data-theme=\"dark\"] #aside-content > .card-widget.card-info { background: #191919ee; } /* 个人信息Follow me按钮 */ #aside-content > .card-widget.card-info > #card-info-btn { background-color: #3eb8be; border-radius: 8px; } /* 首页文章卡片 */ #recent-posts > .recent-post-item { background: var(--trans-light); backdrop-filter: var(--backdrop-filter); border-radius: 25px; border: var(--border-style); } /* 首页侧栏卡片 */ #aside-content .card-widget { background: var(--trans-light); backdrop-filter: var(--backdrop-filter); border-radius: 18px; border: var(--border-style); } /* 文章页、归档页、普通页面 */ div#post, div#page, div#archive { background: var(--trans-light); backdrop-filter: var(--backdrop-filter); border: var(--border-style); border-radius: 20px; } /* 导航栏 */ #page-header.nav-fixed #nav { background: rgba(255, 255, 255, 0.75); backdrop-filter: var(--backdrop-filter); } [data-theme=\"dark\"] #page-header.nav-fixed #nav { background: rgba(0, 0, 0, 0.7) !important; } /* 夜间模式遮罩 */ [data-theme=\"dark\"] #recent-posts > .recent-post-item, [data-theme=\"dark\"] #aside-content .card-widget, [data-theme=\"dark\"] div#post, [data-theme=\"dark\"] div#archive, [data-theme=\"dark\"] div#page { background: var(--trans-dark); } /* 夜间模式页脚页头遮罩透明 */ [data-theme=\"dark\"] #footer::before { background: transparent !important; } [data-theme=\"dark\"] #page-header::before { background: transparent !important; } /* 阅读模式 */ .read-mode #aside-content .card-widget { background: rgba(158, 204, 171, 0.5) !important; } .read-mode div#post { background: rgba(158, 204, 171, 0.5) !important; } /* 夜间模式下的阅读模式 */ [data-theme=\"dark\"] .read-mode #aside-content .card-widget { background: rgba(25, 25, 25, 0.9) !important; color: #ffffff; } [data-theme=\"dark\"] .read-mode div#post { background: rgba(25, 25, 25, 0.9) !important; color: #ffffff; } /* 一级菜单居中 */ #nav .menus_items { position: absolute !important; width: fit-content !important; left: 50% !important; transform: translateX(-50%) !important; } /* 子菜单横向展示 */ /* #nav .menus_items .menus_item:hover .menus_item_child { display: flex !important; } */ /* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */ /* .menus_items .menus_item:nth-child(2) .menus_item_child { left: -125px; } */ /* 全局宽度 */ .layout { max-width: 1400px; } /* 侧边卡片栏宽度 */ .aside-content { max-width: 318px; min-width: 300px; } /* 平板尺寸自适应(不启用侧边栏宽度限制) */ @media screen and (max-width: 900px) { .aside-content { max-width: none !important; padding: 0 5px 0 5px; } } /* 除了首页以外其他页面隐藏卡片，并采用宽屏显示 */ #archive, #page, #category, #tag { width: 100%; } .page:not(.page.home) .aside-content { display: none; } /* 帧率检测 */ #fps { position: fixed; /* 指定位置 */ left: 10px; bottom: 10px; z-index: 1919810; } [data-theme=\"light\"] #fps { background-color: rgba(255, 255, 255, 0.85); backdrop-filter: var(--backdrop-filter); padding: 4px; border-radius: 4px; } [data-theme=\"dark\"] #fps { background-color: rgba(0, 0, 0, 0.72); backdrop-filter: var(--backdrop-filter); padding: 4px; border-radius: 4px; }"},{"title":"","date":"2024-08-07T06:38:54.509Z","updated":"2024-08-07T06:38:54.509Z","comments":true,"path":"css/cat.css","permalink":"http://quweb.xyz/css/cat.css","excerpt":"","text":"body::-webkit-scrollbar { width: 0; } .neko { width: 64px; height: 64px; background-image: url(\"https://bu.dusays.com/2022/07/20/62d812db74be9.png\"); position: absolute; right: 32px; background-repeat: no-repeat; background-size: contain; transform: translateX(50%); cursor: pointer; font-family: tzy; font-weight: 600; font-size: 16px; color: #6f42c1; display: none; } .neko::after { display: none; width: 100px; height: 100px; background-image: url(\"https://bu.dusays.com/2022/07/20/62d812d95e6f5.png\"); background-size: contain; z-index: 9999; position: absolute; right: 50%; text-align: center; line-height: 100px; top: -115%; } .neko.showMsg::after { content: attr(data-msg); display: block; overflow: hidden; text-overflow: ellipsis; } .neko:hover::after { content: attr(data-msg); display: block; overflow: hidden; text-overflow: ellipsis; } .neko.fontColor::after { color: #333; } /** * @description: 滚动条样式 跟猫二选一 */ @media screen and (max-width:992px) { ::-webkit-scrollbar { width: 8px !important; height: 8px !important } ::-webkit-scrollbar-track { border-radius: 2em; } ::-webkit-scrollbar-thumb { background-color: rgb(255 255 255 / .3); background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent); border-radius: 2em } ::-webkit-scrollbar-corner { background-color: transparent } }"},{"title":"","date":"2024-08-07T15:28:59.546Z","updated":"2024-08-07T15:28:59.546Z","comments":true,"path":"css/iconfont.css","permalink":"http://quweb.xyz/css/iconfont.css","excerpt":"","text":"@font-face { font-family: \"iconfont\"; /* Project id 4646226 */ /* Color fonts */ src: url('//at.alicdn.com/t/c/font_4646226_bky0cfo2tyb.woff2?t=1723044435863') format('woff2'), url('//at.alicdn.com/t/c/font_4646226_bky0cfo2tyb.woff?t=1723044435863') format('woff'), url('//at.alicdn.com/t/c/font_4646226_bky0cfo2tyb.ttf?t=1723044435863') format('truetype'); } .iconfont { font-family: \"iconfont\" !important; font-size: 16px; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } .icon-yingyongchengxu:before { content: \"\\e790\"; } .icon-shouye:before { content: \"\\e75f\"; } .icon-youjian:before { content: \"\\e762\"; } .icon-ziliao:before { content: \"\\e764\"; } .icon-bianji:before { content: \"\\e767\"; }"},{"title":"分类","date":"1970-01-01T00:00:02.024Z","updated":"2024-08-06T14:43:41.575Z","comments":true,"path":"categories/index.html","permalink":"http://quweb.xyz/categories/index.html","excerpt":"","text":""},{"title":"","date":"2024-08-07T04:58:18.131Z","updated":"2024-08-07T04:58:18.131Z","comments":true,"path":"css/universe.css","permalink":"http://quweb.xyz/css/universe.css","excerpt":"","text":"/* 背景宇宙星光 */ #universe{ display: block; position: fixed; margin: 0; padding: 0; border: 0; outline: 0; left: 0; top: 0; width: 100%; height: 100%; pointer-events: none; /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */ z-index: -1; }"},{"title":"","date":"2024-08-07T15:46:51.938Z","updated":"2024-08-07T15:46:51.938Z","comments":true,"path":"js/cat.js","permalink":"http://quweb.xyz/js/cat.js","excerpt":"","text":"if (document.body.clientWidth > 992) { function getBasicInfo() { /* 窗口高度 */ var ViewH = $(window).height(); /* document高度 */ var DocH = $(\"body\")[0].scrollHeight; /* 滚动的高度 */ var ScrollTop = $(window).scrollTop(); /* 可滚动的高度 */ var S_V = DocH - ViewH; var Band_H = ScrollTop / (DocH - ViewH) * 100; return { ViewH: ViewH, DocH: DocH, ScrollTop: ScrollTop, Band_H: Band_H, S_V: S_V } }; function show(basicInfo) { if (basicInfo.ScrollTop > 0.001) { $(\".neko\").css('display', 'block'); } else { $(\".neko\").css('display', 'none'); } } (function ($) { $.fn.nekoScroll = function (option) { var defaultSetting = { top: '0', scroWidth: 6 + 'px', z_index: 9999, zoom: 0.9, borderRadius: 5 + 'px', right: 60 + 'px', // 这里可以换为你喜欢的图片，例如我就换为了雪人，但是要抠图 nekoImg: \"https://smartsageblogfile.oss-cn-beijing.aliyuncs.com/blogimages/202408072346216.png\", hoverMsg: \"戳我上去~\", color: \"#6f42c1\", during: 500, blog_body: \"body\", }; var setting = $.extend(defaultSetting, option); var getThis = this.prop(\"className\") !== \"\" ? \".\" + this.prop(\"className\") : this.prop(\"id\") !== \"\" ? \"#\" + this.prop(\"id\") : this.prop(\"nodeName\"); if ($(\".neko\").length == 0) { this.after(\"\"); } let basicInfo = getBasicInfo(); $(getThis) .css({ 'position': 'fixed', 'width': setting.scroWidth, 'top': setting.top, 'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px', 'z-index': setting.z_index, 'background-color': setting.bgcolor, \"border-radius\": setting.borderRadius, 'right': setting.right, 'background-image': 'url(' + setting.scImg + ')', 'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em', 'background-size': 'contain' }); $(\"#\" + setting.nekoname) .css({ 'position': 'fixed', 'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px', 'z-index': setting.z_index * 10, 'right': setting.right, 'background-image': 'url(' + setting.nekoImg + ')', }); show(getBasicInfo()); $(window) .scroll(function () { let basicInfo = getBasicInfo(); show(basicInfo); $(getThis) .css({ 'position': 'fixed', 'width': setting.scroWidth, 'top': setting.top, 'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px', 'z-index': setting.z_index, 'background-color': setting.bgcolor, \"border-radius\": setting.borderRadius, 'right': setting.right, 'background-image': 'url(' + setting.scImg + ')', 'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em', 'background-size': 'contain' }); $(\"#\" + setting.nekoname) .css({ 'position': 'fixed', 'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px', 'z-index': setting.z_index * 10, 'right': setting.right, 'background-image': 'url(' + setting.nekoImg + ')', }); if (basicInfo.ScrollTop == basicInfo.S_V) { $(\"#\" + setting.nekoname) .addClass(\"showMsg\") } else { $(\"#\" + setting.nekoname) .removeClass(\"showMsg\"); $(\"#\" + setting.nekoname) .attr(\"data-msg\", setting.hoverMsg); } }); this.click(function (e) { btf.scrollToDest(0, 500) }); $(\"#\" + setting.nekoname) .click(function () { btf.scrollToDest(0, 500) }); return this; } })(jQuery); $(document).ready(function () { //部分自定义 $(\"#myscoll\").nekoScroll({ bgcolor: 'rgb(0 0 0 / .5)', //背景颜色，没有绳子背景图片时有效 borderRadius: '2em', zoom: 0.9 } ); //自定义（去掉以下注释，并注释掉其他的查看效果） /* $(\"#myscoll\").nekoScroll({ nekoname:'neko1', //nekoname，相当于id nekoImg:'img/猫咪.png', //neko的背景图片 scImg:\"img/绳1.png\", //绳子的背景图片 bgcolor:'#1e90ff', //背景颜色，没有绳子背景图片时有效 zoom:0.9, //绳子长度的缩放值 hoverMsg:'你好~喵', //鼠标浮动到neko上方的对话框信息 right:'100px', //距离页面右边的距离 fontFamily:'楷体', //对话框字体 fontSize:'14px', //对话框字体的大小 color:'#1e90ff', //对话框字体颜色 scroWidth:'8px', //绳子的宽度 z_index:100, //不用解释了吧 during:1200, //从顶部到底部滑动的时长 }); */ }) }"},{"title":"","date":"2024-08-07T05:20:43.011Z","updated":"2024-08-07T05:20:43.011Z","comments":true,"path":"js/cursor.js","permalink":"http://quweb.xyz/js/cursor.js","excerpt":"","text":"var CURSOR; Math.lerp = (a, b, n) => (1 - n) * a + n * b; const getStyle = (el, attr) => { try { return window.getComputedStyle ? window.getComputedStyle(el)[attr] : el.currentStyle[attr]; } catch (e) {} return \"\"; }; class Cursor { constructor() { this.pos = {curr: null, prev: null}; this.pt = []; this.create(); this.init(); this.render(); } move(left, top) { this.cursor.style[\"left\"] = `${left}px`; this.cursor.style[\"top\"] = `${top}px`; } create() { if (!this.cursor) { this.cursor = document.createElement(\"div\"); this.cursor.id = \"cursor\"; this.cursor.classList.add(\"hidden\"); document.body.append(this.cursor); } var el = document.getElementsByTagName('*'); for (let i = 0; i < el.length; i++) if (getStyle(el[i], \"cursor\") == \"pointer\") this.pt.push(el[i].outerHTML); document.body.appendChild((this.scr = document.createElement(\"style\"))); // 这里改变鼠标指针的颜色 由svg生成 this.scr.innerHTML = `* {cursor: url(\"data:image/svg+xml,\") 4 4, auto}`; } refresh() { this.scr.remove(); this.cursor.classList.remove(\"hover\"); this.cursor.classList.remove(\"active\"); this.pos = {curr: null, prev: null}; this.pt = []; this.create(); this.init(); this.render(); } init() { document.onmouseover = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add(\"hover\"); document.onmouseout = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove(\"hover\"); document.onmousemove = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove(\"hidden\");}; document.onmouseenter = e => this.cursor.classList.remove(\"hidden\"); document.onmouseleave = e => this.cursor.classList.add(\"hidden\"); document.onmousedown = e => this.cursor.classList.add(\"active\"); document.onmouseup = e => this.cursor.classList.remove(\"active\"); } render() { if (this.pos.prev) { this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15); this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15); this.move(this.pos.prev.x, this.pos.prev.y); } else { this.pos.prev = this.pos.curr; } requestAnimationFrame(() => this.render()); } } (() => { CURSOR = new Cursor(); // 需要重新获取列表时，使用 CURSOR.refresh() })();"},{"title":"","date":"2024-08-07T07:16:45.834Z","updated":"2024-08-07T07:16:45.834Z","comments":true,"path":"js/fps.js","permalink":"http://quweb.xyz/js/fps.js","excerpt":"","text":"if (window.localStorage.getItem(\"fpson\") == undefined || window.localStorage.getItem(\"fpson\") == \"1\") { var rAF = function () { return ( window.requestAnimationFrame || window.webkitRequestAnimationFrame || function (callback) { window.setTimeout(callback, 1000 / 60); } ); }(); var frame = 0; var allFrameCount = 0; var lastTime = Date.now(); var lastFameTime = Date.now(); var loop = function () { var now = Date.now(); var fs = (now - lastFameTime); var fps = Math.round(1000 / fs); lastFameTime = now; // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS allFrameCount++; frame++; if (now > 1000 + lastTime) { var fps = Math.round((frame * 1000) / (now - lastTime)); if (fps"},{"title":"","date":"2024-08-07T07:18:56.869Z","updated":"2024-08-07T07:18:56.869Z","comments":true,"path":"js/title.js","permalink":"http://quweb.xyz/js/title.js","excerpt":"","text":"//动态标题 var OriginTitile = document.title; var titleTime; document.addEventListener('visibilitychange', function () { if (document.hidden) { //离开当前页面时标签显示内容 document.title = '👀跑哪里去了~'; clearTimeout(titleTime); } else { //返回当前页面时标签显示内容 document.title = '🐖抓到你啦～'; //两秒后变回正常标题 titleTime = setTimeout(function () { document.title = OriginTitile; }, 2000); } });"},{"title":"链接","date":"1970-01-01T00:00:02.024Z","updated":"2024-08-06T10:22:57.452Z","comments":true,"path":"link/index.html","permalink":"http://quweb.xyz/link/index.html","excerpt":"","text":""},{"title":"","date":"2024-08-07T04:58:02.294Z","updated":"2024-08-07T04:58:02.294Z","comments":true,"path":"js/universe.js","permalink":"http://quweb.xyz/js/universe.js","excerpt":"","text":"function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(\"universe\"),o=!0,a=\"180,184,240\",r=\"226,225,142\",d=\"226,225,224\",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(\"width\",n),s.setAttribute(\"height\",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;ithis.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacityn||this.y"},{"title":"电影","date":"1970-01-01T00:00:02.024Z","updated":"2024-08-06T10:23:01.576Z","comments":true,"path":"movies/index.html","permalink":"http://quweb.xyz/movies/index.html","excerpt":"","text":""},{"title":"音乐","date":"1970-01-01T00:00:02.024Z","updated":"2024-08-06T10:20:22.862Z","comments":true,"path":"music/index.html","permalink":"http://quweb.xyz/music/index.html","excerpt":"","text":""},{"title":"标签","date":"1970-01-01T00:00:02.024Z","updated":"2024-08-07T15:49:34.877Z","comments":true,"path":"tags/index.html","permalink":"http://quweb.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringBoot注解","slug":"SpringBoot注解","date":"2024-08-08T07:28:00.000Z","updated":"2024-08-08T07:28:00.000Z","comments":true,"path":"2024/08/08/SpringBoot注解/","permalink":"http://quweb.xyz/2024/08/08/SpringBoot%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"HTTP请求 @GetMapping @PostMapping @PutMapping @DeleteMapping @PatchMapping 分别对应HTTP的GET, POST, PUT, DELETE, PATCH请求，简化了@RequestMapping的使用。 前后端参数传递@RequestParam将请求参数(在请求地址里面的参数 ?name=Tom)绑定到控制器的方法参数上 1234语法：@RequestParam(value=&quot;参数名&quot;,required=&quot;true/false&quot;,defaultValue=&quot;&quot;)value：参数名,请求路径中的参数名required：是否包含该参数，默认为true，表示该请求路径中必须包含该参数，如果不包含就报错。defaultValue：默认参数值，如果设置了该值，required=true将失效，自动为false,如果没有传该参数，就使用默认值 @PathVariable用于将URL中的占位符绑定到方法参数上 123456789@RestController@RequestMapping(&quot;/api&quot;)public class MyController &#123; @GetMapping(&quot;/user/&#123;id&#125;&quot;) public String getUserById(@PathVariable(&quot;id&quot;) Long id) &#123; // 如果参数名可URL中占位符名一样，可以不写注解的参数 return &quot;User ID: &quot; + id; &#125;&#125; 请求路径 1GET /api/user/123 id的值就为123 还可以处理多个参数 123456789@RestController@RequestMapping(&quot;/api&quot;)public class MyController &#123; @GetMapping(&quot;/order/&#123;orderId&#125;/item/&#123;itemId&#125;&quot;) public String getOrderItem(@PathVariable(&quot;orderId&quot;) Long orderId, @PathVariable(&quot;itemId&quot;) Long itemId) &#123; return &quot;Order ID: &quot; + orderId + &quot;, Item ID: &quot; + itemId; &#125;&#125; @RequestBody用对象来接受请求体中的json格式数据 required：是否为必需参数，默认为true，如果请求中没有对应的内容会抛出异常。可以设置为false来允许请求体为空。 处理包含多个对象的JSON数组 123456789@RestController@RequestMapping(&quot;/api&quot;)public class MyController &#123; @PostMapping(&quot;/users&quot;) public String createUsers(@RequestBody List&lt;User&gt; users) &#123; return &quot;Number of users created: &quot; + users.size(); &#125;&#125; 请求： 12345678910111213POST /api/usersContent-Type: application/json[ &#123; &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30 &#125;, &#123; &quot;name&quot;: &quot;Jane&quot;, &quot;age&quot;: 25 &#125;] 接受复杂的JSON数据，对象套对象 1234567891011121314151617181920public class Address &#123; private String city; private String state;&#125;public class User &#123; private String name; private int age; private Address address;&#125;@RestController@RequestMapping(&quot;/api&quot;)public class MyController &#123; @PostMapping(&quot;/user&quot;) public String createUser(@RequestBody User user) &#123; return &quot;User created: &quot; + user.getName() + &quot;, age: &quot; + user.getAge() + &quot;, city: &quot; + user.getAddress().getCity(); &#125;&#125; 请求： 1234567891011POST /api/userContent-Type: application/json&#123; &quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;address&quot;: &#123; &quot;city&quot;: &quot;New York&quot;, &quot;state&quot;: &quot;NY&quot; &#125;&#125; 对象属性与JSON中不一致 用@ JsonProperty 给属性起别名 1234567public class Address &#123; @JsonProperty(value = &quot;city&quot;) private String userCity; @JsonProperty(value = &quot;state&quot;) private String userState;&#125; @ResponseBody@ResponseBody注解用于将控制器方法的返回值直接写入HTTP响应体中，而不是解析为视图名称。它通常用于RESTful Web服务，以返回JSON、XML或其他格式的数据。@ResponseBody可以作用在方法上或者类上（全局作用）。 返回简单字符串 12345678910@RestController@RequestMapping(&quot;/api&quot;)public class MyController &#123; @GetMapping(&quot;/greeting&quot;) @ResponseBody public String greeting() &#123; return &quot;Hello, World!&quot;; &#125;&#125; 返回JSON 123456789101112@RestController@RequestMapping(&quot;/api&quot;)public class MyController &#123; @GetMapping(&quot;/user&quot;) @ResponseBody public User getUser() &#123; User user = new User(); return user; &#125;&#125; 简化 使用@RestController简化 @RestController是一个组合注解，相当于@Controller和@ResponseBody的组合。使用@RestController可以省略每个方法上的@ResponseBody注解。 Bean处理@Autowired将IOC容器中的对象自动注入 12@AutowiredAnimal animal; 用在构造方法上，注入给构造方法中的参数 用在方法上，注入给方法中的参数 多个同类型的Bean 如果Spring上下文中存在多个同类型的Bean，使用@Autowired时会引发NoUniqueBeanDefinitionException。此时可以使用@Qualifier注解来指定注入的具体Bean。 1234567891011121314151617181920212223242526272829303132@Component(&quot;myService1&quot;)public class MyService1 implements MyService &#123; public void serve() &#123; System.out.println(&quot;Service1 is serving...&quot;); &#125;&#125;@Component(&quot;myService2&quot;)public class MyService2 implements MyService &#123; public void serve() &#123; System.out.println(&quot;Service2 is serving...&quot;); &#125;&#125;@RestController@RequestMapping(&quot;/api&quot;)public class MyController &#123; private final MyService myService; @Autowired public MyController(@Qualifier(&quot;myService1&quot;) MyService myService) &#123; this.myService = myService; &#125; @GetMapping(&quot;/serve&quot;) public String serve() &#123; myService.serve(); return &quot;Service called&quot;; &#125;&#125; 使用@Primary 可以使用@Primary注解来标记一个Bean为首选的，当存在多个同类型的Bean时，Spring会优先注入标记了@Primary的Bean。 123456789101112131415161718192021222324252627282930313233@Component@Primarypublic class MyService1 implements MyService &#123; public void serve() &#123; System.out.println(&quot;Service1 is serving...&quot;); &#125;&#125;@Componentpublic class MyService2 implements MyService &#123; public void serve() &#123; System.out.println(&quot;Service2 is serving...&quot;); &#125;&#125;@RestController@RequestMapping(&quot;/api&quot;)public class MyController &#123; private final MyService myService; @Autowired public MyController(MyService myService) &#123; this.myService = myService; &#125; @GetMapping(&quot;/serve&quot;) public String serve() &#123; myService.serve(); return &quot;Service called&quot;; &#125;&#125; @Component用于将类标记为Spring管理的Bean。Spring会自动检测并注册这些被注解的类，通常用于实现自动扫描和依赖注入。 可以通过value属性指定Bean的名称： 123@Component(&quot;customService&quot;)public class MyService &#123;&#125; 然后在其他类中通过名称注入该组件： 1234567@RestController@RequestMapping(&quot;/api&quot;)public class MyController &#123; @Autowired @Qualifier(&quot;customService&quot;) private MyService myService;&#125; @Component的派生注解 Spring提供了一些特定场景下使用的派生注解，这些注解本质上都是@Component的变种，用于更清晰地表示组件的角色。 @Service用于标注服务层的组件： @Repository用于标注数据访问层的组件，通常与数据库操作相关：\\ @Controller用于标注控制器组件，处理HTTP请求： @RestController @Controller和@ResponseBody的组合 @Controller用于标记一个类，使用他标记的类就是一个SpringMVC Controller对象，即一个控制器类，Spring使用扫描机制查找所有基于该注解的控制器类。分发处理器会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping注解，使用了@ResquestMpping注解的方法才是真正处理请求的处理器。 @RequestMapping如果没有指定请求方式，将接收GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE、CONNECT所有的HTTP请求方式。@GetMapping、@PostMapping、@PutMapping、@DeleteMapping、@PatchMapping 都是HTTP方法特有的快捷方式@RequestMapping的变体，分别对应具体的HTTP请求方式的映射注解。 1@RequestMapping(&quot;/user/login&quot;) // https://localhost:8080/login/user 用在类上，该类的方法的url会跟在类的url后面 用在方法上，当前端访问注解内的地址时会调用该注解所标注的对象 @Respository@Service@Service注解用于类上，标记当前类是一个service类，加上该注解会将当前类自动注入到spring容器中. @RestController@Controller和@ResponseBody的组合 @Scope读取配置@Value用于注入外部化配置值到Spring Bean的注解。它可以将属性文件中的值、系统属性、环境变量或任意字符串注入到Bean的字段、构造函数或方法参数中。 例如： 12app.name=My Applicationapp.version=1.0.0 1234567891011121314151617import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Componentpublic class AppConfig &#123; @Value(&quot;$&#123;app.name&#125;&quot;) private String appName; @Value(&quot;$&#123;app.version&#125;&quot;) private String appVersion; public void printConfig() &#123; System.out.println(&quot;App Name: &quot; + appName); System.out.println(&quot;App Version: &quot; + appVersion); &#125;&#125; @ConfigurationProperties@PropertySource参数校验Bean字段验证12345678910111213141516@NotEmpty // 字段不为null且不为空字符串@NotBlank // 字段不为null且必须包含至少一个非空白字符@Null // 字段必须为null@NotNull // 字段不能为空@AssertTrue // 字段必须为true@AssertFalse // 字段必须为false@Pattern(regex=, flag=) // 字段必须符合指定的正则表达式@Email // 字段必须是有效的电子邮件地址@Min(value) // 字段的值必须大于或等于指定的最小值@Max(value) // 字段的值必须小于或等于指定的最大值@DecimalMin(value) // 字段的值必须大于或等于指定的最小值（用于小数）@DecimalMax(value) // 字段的值必须小于或等于指定的最大值（用于小数）@Size(max=, min=) // 字段的大小必须在指定范围内@Digits(integer=, fraction=) // 字段的整数位数和小数位数必须在指定范围内@Past // 字段的值必须是过去的日期@Future // 字段的值必须是未来的日期 @Valid@Valid注解用于触发对象的校验。它通常用在方法参数或字段上，表示需要对该对象进行校验。 @Validated@Validated注解用于校验分组（Group Validation），它可以在类或方法级别使用。与@Valid不同，@Validated可以指定特定的校验组，从而实现分组校验。 同时，对象在指明校验时也需要指明分组 1234567public class User &#123; @NotEmpty(groups = UserGroup.class) private String username; @NotEmpty private String password;&#125; 统一异常处理@ControllerAdvice@RestControllerAdvice是@ControllerAdvice 和 @ResponseBody 的结合体。 @ExceptionHandler@ExceptionHandler注解是Spring框架中的一个用于处理异常的方法注解。它通常与@ControllerAdvice或控制器类结合使用，定义一个方法来处理特定类型的异常，从而实现全局或局部的异常处理。 12345678910111213@ControllerAdvicepublic class GlobalExceptionHandler &#123; @ExceptionHandler(RuntimeException.class) public ResponseEntity&lt;String&gt; handleRuntimeException(RuntimeException ex) &#123; return new ResponseEntity&lt;&gt;(&quot;Handled RuntimeException: &quot; + ex.getMessage(), HttpStatus.BAD_REQUEST); &#125; @ExceptionHandler(Exception.class) public ResponseEntity&lt;String&gt; handleException(Exception ex) &#123; return new ResponseEntity&lt;&gt;(&quot;Handled Exception: &quot; + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR); &#125;&#125; JPA数据持久化JSON数据处理@JsonIgnoreProperties@JsonIgnoreProperties注解用于在序列化或反序列化时忽略指定的属性。 用法： 123456@JsonIgnoreProperties(&#123; &quot;name&quot;, &quot;pasword&quot; &#125;)public class User &#123; private String name; private String password; private int age;&#125; 解释： 该注解可以放在类上，指定在序列化和反序列化时要忽略的属性列表。 常用于忽略某些敏感数据或不需要传递的数据。 @JsonIgnore@JsonIgnore注解用于在序列化和反序列化时忽略单个字段。 用法： 12345678public class User &#123; private String name; @JsonIgnore private String password; private int age;&#125; 解释： 标记在字段或getter方法上，被标记的字段不会被序列化或反序列化。 适用于需要忽略单个字段的情况。 @JsonFormat@JsonFormat注解用于指定日期、时间等格式化模式的序列化和反序列化。 用法： 1234567public class Event &#123; private String name; @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) // @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)也可以这样 private Date eventDate;&#125; 解释： shape：指定序列化的形状，比如JsonFormat.Shape.STRING将日期格式化为字符串。 pattern：指定日期、时间等格式的模式。 常用于处理日期和时间格式的转换。 @JsonUnwrapped@JsonUnwrapped注解用于将嵌套对象的属性“展开”到父对象中进行序列化或反序列化。 用法： 1234567891011public class Name &#123; private String firstName; private String lastName;&#125;public class User &#123; private int id; @JsonUnwrapped private Name name;&#125; 解释： 当@JsonUnwrapped应用于一个对象字段时，该对象的属性将直接作为父对象的属性被序列化或反序列化，而不是作为嵌套对象。 适用于需要将嵌套对象的属性直接平铺到父对象中的场景。 配置启动@SpringBootApplication这是一个组合注解，包括@SpringBootConfiguration，@EnableAutoConfiguration，和@ComponentScan。标记一个主配置类，Spring Boot可以通过该类启动应用程序。","categories":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://quweb.xyz/categories/JavaWeb/"},{"name":"SpringBoot","slug":"JavaWeb/SpringBoot","permalink":"http://quweb.xyz/categories/JavaWeb/SpringBoot/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://quweb.xyz/tags/SpringBoot/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://quweb.xyz/tags/JavaWeb/"},{"name":"注解","slug":"注解","permalink":"http://quweb.xyz/tags/%E6%B3%A8%E8%A7%A3/"}]},{"title":"HTTP协议","slug":"HTTP协议","date":"2024-08-07T13:00:00.000Z","updated":"2024-08-07T13:00:00.000Z","comments":true,"path":"2024/08/07/HTTP协议/","permalink":"http://quweb.xyz/2024/08/07/HTTP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"HTTP协议1.HTTP协议简介HTTP：Hyper Text Transfer Protocol(超文本传输协议)，规定了浏览器与服务器之间数据传输的规则。 HTTP是基于TCP协议的HTTP是无连接的无连接的含义是限制每次连接只能处理一个请求，处理完请求后会断开连接 HTTP是无状态的对于数据没有记忆能力。每次请求-响应都是独立的。请求之间不会共享数据 HTTP分为请求协议和响应协议2.HTTP-请求协议浏览器将数据以请求格式发送到服务器，由四部分组成：请求行，请求头，空行，请求体 一般格式： 请求行（Request Line）： 方法：如 GET、POST、PUT、DELETE等，指定要执行的操作。 请求 URI（统一资源标识符）：请求的资源路径，通常包括主机名、端口号（如果非默认）、路径和查询字符串。 HTTP 版本：如 HTTP/1.1 或 HTTP/2。 请求行的格式示例：GET /index.html HTTP/1.1 请求头（Request Headers）： 格式为key: value形式 包含了客户端环境信息、请求体的大小（如果有）、客户端支持的压缩类型等。 常见的请求头包括Host、User-Agent、Accept、Accept-Encoding、Content-Length等。 12345678910111213Host: 表示请求的主机名User-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79 ，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like GeckoAccept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。Content-Type：请求主体的数据类型Content-Length：数据主体的大小（单位：字节） 空行： 请求头和请求体之间的分隔符，表示请求头的结束。 请求体（可选）： 在某些类型的HTTP请求（如 POST 和 PUT）中，请求体包含要发送给服务器的数据。 GET请求中，请求参数放在了请求行中的地址中 在HTTP1.1版本中，浏览器访问服务器的几种方式： 请求方式 请求说明 GET 获取资源。向特定的资源发出请求。例：http://www.baidu.com/s?wd=http POST 传输实体主体。向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。 OPTIONS 返回服务器针对特定资源所支持的HTTP请求方式。因为并不是所有的服务器都支持规定的方法，为了安全有些服务器可能会禁止掉一些方法，例如：DELETE、PUT等。那么OPTIONS就是用来询问服务器支持的方法。 HEAD 获得报文首部。HEAD方法类似GET方法，但是不同的是HEAD方法不要求返回数据。通常用于确认URI的有效性及资源更新时间等。 PUT 传输文件。PUT方法用来传输文件。类似FTP协议，文件内容包含在请求报文的实体中，然后请求保存到URL指定的服务器位置。 DELETE 删除文件。请求服务器删除Request-URI所标识的资源 TRACE 追踪路径。回显服务器收到的请求，主要用于测试或诊断 CONNECT 要求用隧道协议连接代理。HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器 在我们实际应用中常用的也就是 ：GET、POST GET请求和POST请求的区别： 区别方式 GET请求 POST请求 请求参数 请求参数在请求行中。例：/brand/findAll?name=OPPO&amp;status=1 请求参数在请求体中 请求参数长度 请求参数长度有限制(浏览器不同限制也不同) 请求参数长度没有限制 安全性 安全性低。原因：请求参数暴露在浏览器地址栏中。 安全性相对高 3.HTTP-响应协议一般格式 服务器将数据以响应格式返回给浏览器，包括：状态行 、响应头 、空行、响应体 状态行（Status Line） 响应数据的第一行。响应行由协议及版本、响应状态码、状态码描述组成 响应头（Response Headers） 响应数据的第二行开始。格式为key：value形式 常见的HTTP响应头有: 123456789Content-Type：表示该响应内容的类型，例如text/html，image/jpeg ；Content-Length：表示该响应内容的长度（字节数）；Content-Encoding：表示该响应压缩算法，例如gzip ；Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒 ;Set-Cookie: 告诉浏览器为当前页面所在的域设置cookie ; 空行 响应头和响应体之间的分隔符，表示响应头的结束。 响应体（可选）： 响应数据的最后一部分。存储响应的数据 响应体和响应头之间有一个空行隔开（作用：用于标记响应头结束）","categories":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://quweb.xyz/categories/JavaWeb/"},{"name":"HTTP","slug":"JavaWeb/HTTP","permalink":"http://quweb.xyz/categories/JavaWeb/HTTP/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://quweb.xyz/tags/JavaWeb/"},{"name":"HTTP","slug":"HTTP","permalink":"http://quweb.xyz/tags/HTTP/"}]},{"title":"Welcome to My Blog!","slug":"Welcome to My Blog","date":"2024-08-07T12:00:00.000Z","updated":"2024-08-07T12:00:00.000Z","comments":true,"path":"2024/08/07/Welcome to My Blog/","permalink":"http://quweb.xyz/2024/08/07/Welcome%20to%20My%20Blog/","excerpt":"","text":"Welcome to My Blog!","categories":[{"name":"Welcome","slug":"Welcome","permalink":"http://quweb.xyz/categories/Welcome/"}],"tags":[{"name":"Welcome","slug":"Welcome","permalink":"http://quweb.xyz/tags/Welcome/"}]}],"categories":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://quweb.xyz/categories/JavaWeb/"},{"name":"SpringBoot","slug":"JavaWeb/SpringBoot","permalink":"http://quweb.xyz/categories/JavaWeb/SpringBoot/"},{"name":"HTTP","slug":"JavaWeb/HTTP","permalink":"http://quweb.xyz/categories/JavaWeb/HTTP/"},{"name":"Welcome","slug":"Welcome","permalink":"http://quweb.xyz/categories/Welcome/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://quweb.xyz/tags/SpringBoot/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://quweb.xyz/tags/JavaWeb/"},{"name":"注解","slug":"注解","permalink":"http://quweb.xyz/tags/%E6%B3%A8%E8%A7%A3/"},{"name":"HTTP","slug":"HTTP","permalink":"http://quweb.xyz/tags/HTTP/"},{"name":"Welcome","slug":"Welcome","permalink":"http://quweb.xyz/tags/Welcome/"}]}