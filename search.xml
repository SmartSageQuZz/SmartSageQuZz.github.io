<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot注解</title>
      <link href="/2024/08/08/SpringBoot%E6%B3%A8%E8%A7%A3/"/>
      <url>/2024/08/08/SpringBoot%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h1><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li><li>@PatchMapping</li></ul><p>分别对应HTTP的GET, POST, PUT, DELETE, PATCH请求，简化了<code>@RequestMapping</code>的使用。</p><h1 id="前后端参数传递"><a href="#前后端参数传递" class="headerlink" title="前后端参数传递"></a>前后端参数传递</h1><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>将请求参数(在请求地址里面的参数 <code>?name=Tom</code>)绑定到控制器的方法参数上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="meta">@RequestParam(value=&quot;参数名&quot;,required=&quot;true/false&quot;,defaultValue=&quot;&quot;)</span></span><br><span class="line">value：参数名,请求路径中的参数名</span><br><span class="line">required：是否包含该参数，默认为<span class="literal">true</span>，表示该请求路径中必须包含该参数，如果不包含就报错。</span><br><span class="line">defaultValue：默认参数值，如果设置了该值，required=<span class="literal">true</span>将失效，自动为<span class="literal">false</span>,如果没有传该参数，就使用默认值</span><br></pre></td></tr></table></figure><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>用于将URL中的占位符绑定到方法参数上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123; <span class="comment">// 如果参数名可URL中占位符名一样，可以不写注解的参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User ID: &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /api/user/123</span><br></pre></td></tr></table></figure><p>id的值就为123</p><p>还可以处理多个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/&#123;orderId&#125;/item/&#123;itemId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrderItem</span><span class="params">(<span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId, <span class="meta">@PathVariable(&quot;itemId&quot;)</span> Long itemId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order ID: &quot;</span> + orderId + <span class="string">&quot;, Item ID: &quot;</span> + itemId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>用对象来接受请求体中的json格式数据</p><p><code>required</code>：是否为必需参数，默认为<code>true</code>，如果请求中没有对应的内容会抛出异常。可以设置为<code>false</code>来允许请求体为空。</p><p><strong>处理包含多个对象的JSON数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUsers</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; users)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Number of users created: &quot;</span> + users.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /api/users</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: 30</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: 25</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>接受复杂的JSON数据，对象套对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User created: &quot;</span> + user.getName() + <span class="string">&quot;, age: &quot;</span> + user.getAge() + <span class="string">&quot;, city: &quot;</span> + user.getAddress().getCity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /api/user</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">        <span class="string">&quot;state&quot;</span>: <span class="string">&quot;NY&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象属性与JSON中不一致</strong></p><p>用<code>@ JsonProperty</code> 给属性起别名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="meta">@JsonProperty(value = &quot;city&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userCity;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonProperty(value = &quot;state&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p><code>@ResponseBody</code>注解用于将控制器方法的返回值直接写入HTTP响应体中，而不是解析为视图名称。它通常用于RESTful Web服务，以返回JSON、XML或其他格式的数据。<code>@ResponseBody</code>可以作用在方法上或者类上（全局作用）。</p><p><strong>返回简单字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/greeting&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">greeting</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回JSON</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>简化</strong></p><p>使用@RestController简化</p><p><code>@RestController</code>是一个组合注解，相当于<code>@Controller</code>和<code>@ResponseBody</code>的组合。使用<code>@RestController</code>可以省略每个方法上的<code>@ResponseBody</code>注解。</p><h1 id="Bean处理"><a href="#Bean处理" class="headerlink" title="Bean处理"></a>Bean处理</h1><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>将IOC容器中的对象自动注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Animal animal;</span><br></pre></td></tr></table></figure><ul><li><p>用在构造方法上，注入给构造方法中的参数</p></li><li><p>用在方法上，注入给方法中的参数</p></li></ul><p><strong>多个同类型的Bean</strong></p><p>如果Spring上下文中存在多个同类型的Bean，使用<code>@Autowired</code>时会引发<code>NoUniqueBeanDefinitionException</code>。此时可以使用<code>@Qualifier</code>注解来指定注入的具体Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;myService1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService1</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serve</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service1 is serving...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;myService2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService2</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serve</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service2 is serving...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyController</span><span class="params">(<span class="meta">@Qualifier(&quot;myService1&quot;)</span> MyService myService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myService = myService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/serve&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serve</span><span class="params">()</span> &#123;</span><br><span class="line">        myService.serve();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Service called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用<code>@Primary</code></strong></p><p>可以使用<code>@Primary</code>注解来标记一个Bean为首选的，当存在多个同类型的Bean时，Spring会优先注入标记了<code>@Primary</code>的Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService1</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serve</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service1 is serving...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService2</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serve</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service2 is serving...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyController</span><span class="params">(MyService myService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myService = myService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/serve&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serve</span><span class="params">()</span> &#123;</span><br><span class="line">        myService.serve();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Service called&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>用于将类标记为Spring管理的Bean。Spring会自动检测并注册这些被注解的类，通常用于实现自动扫描和依赖注入。</p><p><strong>可以通过<code>value</code>属性指定Bean的名称：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;customService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在其他类中通过名称注入该组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;customService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Component的派生注解</strong></p><p>Spring提供了一些特定场景下使用的派生注解，这些注解本质上都是<code>@Component</code>的变种，用于更清晰地表示组件的角色。</p><ul><li><p><code>@Service</code>用于标注服务层的组件：</p></li><li><p><code>@Repository</code>用于标注数据访问层的组件，通常与数据库操作相关：\</p></li><li><p><code>@Controller</code>用于标注控制器组件，处理HTTP请求：</p></li><li><p><code>@RestController</code>     <code>@Controller</code>和<code>@ResponseBody</code>的组合</p></li></ul><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>用于标记一个类，使用他标记的类就是一个<code>SpringMVC Controller</code>对象，即一个控制器类，Spring使用扫描机制查找所有基于该注解的控制器类。分发处理器会扫描使用了该注解的类的方法，并检测该方法是否使用了<code>@RequestMapping</code>注解，使用了<code>@ResquestMpping</code>注解的方法才是真正处理请求的处理器。</p><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>如果没有指定请求方式，将接收GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE、CONNECT所有的HTTP请求方式。@GetMapping、@PostMapping、@PutMapping、@DeleteMapping、@PatchMapping 都是HTTP方法特有的快捷方式@RequestMapping的变体，分别对应具体的HTTP请求方式的映射注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span> <span class="comment">// https://localhost:8080/login/user</span></span><br></pre></td></tr></table></figure><p>用在类上，该类的方法的url会跟在类的url后面</p><p>用在方法上，当前端访问注解内的地址时会调用该注解所标注的对象</p><h2 id="Respository"><a href="#Respository" class="headerlink" title="@Respository"></a>@Respository</h2><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>@Service注解用于类上，标记当前类是一个service类，加上该注解会将当前类自动注入到spring容器中.</p><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p><code>@Controller</code>和<code>@ResponseBody</code>的组合</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><h1 id="读取配置"><a href="#读取配置" class="headerlink" title="读取配置"></a>读取配置</h1><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><p>用于注入外部化配置值到Spring Bean的注解。它可以将属性文件中的值、系统属性、环境变量或任意字符串注入到Bean的字段、构造函数或方法参数中。</p><p>例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app.name</span>=<span class="string">My Application</span></span><br><span class="line"><span class="attr">app.version</span>=<span class="string">1.0.0</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.version&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appVersion;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;App Name: &quot;</span> + appName);</span><br><span class="line">        System.out.println(<span class="string">&quot;App Version: &quot;</span> + appVersion);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><h2 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h2><h1 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h1><h2 id="Bean字段验证"><a href="#Bean字段验证" class="headerlink" title="Bean字段验证"></a>Bean字段验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotEmpty</span> <span class="comment">// 字段不为null且不为空字符串</span></span><br><span class="line"><span class="meta">@NotBlank</span> <span class="comment">// 字段不为null且必须包含至少一个非空白字符</span></span><br><span class="line"><span class="meta">@Null</span> <span class="comment">// 字段必须为null</span></span><br><span class="line"><span class="meta">@NotNull</span> <span class="comment">// 字段不能为空</span></span><br><span class="line"><span class="meta">@AssertTrue</span> <span class="comment">// 字段必须为true</span></span><br><span class="line"><span class="meta">@AssertFalse</span> <span class="comment">// 字段必须为false</span></span><br><span class="line"><span class="meta">@Pattern(regex=, flag=)</span> <span class="comment">// 字段必须符合指定的正则表达式</span></span><br><span class="line"><span class="meta">@Email</span> <span class="comment">// 字段必须是有效的电子邮件地址</span></span><br><span class="line"><span class="meta">@Min(value)</span> <span class="comment">// 字段的值必须大于或等于指定的最小值</span></span><br><span class="line"><span class="meta">@Max(value)</span> <span class="comment">// 字段的值必须小于或等于指定的最大值</span></span><br><span class="line"><span class="meta">@DecimalMin(value)</span> <span class="comment">// 字段的值必须大于或等于指定的最小值（用于小数）</span></span><br><span class="line"><span class="meta">@DecimalMax(value)</span> <span class="comment">// 字段的值必须小于或等于指定的最大值（用于小数）</span></span><br><span class="line"><span class="meta">@Size(max=, min=)</span> <span class="comment">// 字段的大小必须在指定范围内</span></span><br><span class="line"><span class="meta">@Digits(integer=, fraction=)</span> <span class="comment">// 字段的整数位数和小数位数必须在指定范围内</span></span><br><span class="line"><span class="meta">@Past</span> <span class="comment">// 字段的值必须是过去的日期</span></span><br><span class="line"><span class="meta">@Future</span> <span class="comment">// 字段的值必须是未来的日期</span></span><br></pre></td></tr></table></figure><h2 id="Valid"><a href="#Valid" class="headerlink" title="@Valid"></a>@Valid</h2><p><code>@Valid</code>注解用于触发对象的校验。它通常用在方法参数或字段上，表示需要对该对象进行校验。</p><h2 id="Validated"><a href="#Validated" class="headerlink" title="@Validated"></a>@Validated</h2><p><code>@Validated</code>注解用于校验分组（Group Validation），它可以在类或方法级别使用。与<code>@Valid</code>不同，<code>@Validated</code>可以指定特定的校验组，从而实现分组校验。</p><p>同时，对象在指明校验时也需要指明分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotEmpty(groups = UserGroup.class)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h1><h2 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h2><p><code>@RestControllerAdvice</code>是<code>@ControllerAdvice</code> 和 <code>@ResponseBody</code> 的结合体。</p><h2 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h2><p><code>@ExceptionHandler</code>注解是Spring框架中的一个用于处理异常的方法注解。它通常与<code>@ControllerAdvice</code>或控制器类结合使用，定义一个方法来处理特定类型的异常，从而实现全局或局部的异常处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">handleRuntimeException</span><span class="params">(RuntimeException ex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="string">&quot;Handled RuntimeException: &quot;</span> + ex.getMessage(), HttpStatus.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">handleException</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="string">&quot;Handled Exception: &quot;</span> + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JPA数据持久化"><a href="#JPA数据持久化" class="headerlink" title="JPA数据持久化"></a>JPA数据持久化</h1><h1 id="JSON数据处理"><a href="#JSON数据处理" class="headerlink" title="JSON数据处理"></a>JSON数据处理</h1><h2 id="JsonIgnoreProperties"><a href="#JsonIgnoreProperties" class="headerlink" title="@JsonIgnoreProperties"></a>@JsonIgnoreProperties</h2><p><code>@JsonIgnoreProperties</code>注解用于在序列化或反序列化时忽略指定的属性。</p><p><strong>用法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties(&#123; &quot;name&quot;, &quot;pasword&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><p>该注解可以放在类上，指定在序列化和反序列化时要忽略的属性列表。</p></li><li><p>常用于忽略某些敏感数据或不需要传递的数据。</p></li></ul><h2 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore"></a>@JsonIgnore</h2><p><code>@JsonIgnore</code>注解用于在序列化和反序列化时忽略单个字段。</p><ul><li><p><strong>用法</strong>：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>解释</strong>：</p><ul><li>标记在字段或getter方法上，被标记的字段不会被序列化或反序列化。</li><li>适用于需要忽略单个字段的情况。</li></ul></li></ul><h2 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat"></a>@JsonFormat</h2><p><code>@JsonFormat</code>注解用于指定日期、时间等格式化模式的序列化和反序列化。</p><ul><li><p><strong>用法</strong>：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="comment">// @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)也可以这样</span></span><br><span class="line">    <span class="keyword">private</span> Date eventDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>解释</strong>：</p><ul><li><code>shape</code>：指定序列化的形状，比如<code>JsonFormat.Shape.STRING</code>将日期格式化为字符串。</li><li><code>pattern</code>：指定日期、时间等格式的模式。</li><li>常用于处理日期和时间格式的转换。</li></ul></li></ul><h2 id="JsonUnwrapped"><a href="#JsonUnwrapped" class="headerlink" title="@JsonUnwrapped"></a>@JsonUnwrapped</h2><p><code>@JsonUnwrapped</code>注解用于将嵌套对象的属性“展开”到父对象中进行序列化或反序列化。</p><ul><li><p><strong>用法</strong>：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonUnwrapped</span></span><br><span class="line">    <span class="keyword">private</span> Name name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>解释</strong>：</p><ul><li>当<code>@JsonUnwrapped</code>应用于一个对象字段时，该对象的属性将直接作为父对象的属性被序列化或反序列化，而不是作为嵌套对象。</li><li>适用于需要将嵌套对象的属性直接平铺到父对象中的场景。</li></ul></li></ul><h1 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h1><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>这是一个组合注解，包括<code>@SpringBootConfiguration</code>，<code>@EnableAutoConfiguration</code>，和<code>@ComponentScan</code>。标记一个主配置类，Spring Boot可以通过该类启动应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2024/08/07/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2024/08/07/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="1-HTTP协议简介"><a href="#1-HTTP协议简介" class="headerlink" title="1.HTTP协议简介"></a>1.HTTP协议简介</h2><p>HTTP：Hyper Text Transfer Protocol(超文本传输协议)，规定了浏览器与服务器之间数据传输的规则。</p><h3 id="HTTP是基于TCP协议的"><a href="#HTTP是基于TCP协议的" class="headerlink" title="HTTP是基于TCP协议的"></a>HTTP是基于TCP协议的</h3><h3 id="HTTP是无连接的"><a href="#HTTP是无连接的" class="headerlink" title="HTTP是无连接的"></a>HTTP是无连接的</h3><p>无连接的含义是限制每次连接只能处理一个请求，处理完请求后会断开连接</p><h3 id="HTTP是无状态的"><a href="#HTTP是无状态的" class="headerlink" title="HTTP是无状态的"></a>HTTP是无状态的</h3><p>对于数据没有记忆能力。每次请求-响应都是独立的。请求之间不会共享数据</p><h3 id="HTTP分为请求协议和响应协议"><a href="#HTTP分为请求协议和响应协议" class="headerlink" title="HTTP分为请求协议和响应协议"></a>HTTP分为请求协议和响应协议</h3><h2 id="2-HTTP-请求协议"><a href="#2-HTTP-请求协议" class="headerlink" title="2.HTTP-请求协议"></a>2.HTTP-请求协议</h2><p>浏览器将数据以请求格式发送到服务器，由四部分组成：<strong>请求行</strong>，<strong>请求头</strong>，<strong>空行</strong>，<strong>请求体</strong></p><h3 id="一般格式："><a href="#一般格式：" class="headerlink" title="一般格式："></a>一般格式：</h3><p><img src="https://smartsageblogfile.oss-cn-beijing.aliyuncs.com/blogimages/202408072259146.png" alt="">  </p><p><strong>请求行</strong>（Request Line）：</p><ul><li><strong>方法</strong>：如 GET、POST、PUT、DELETE等，指定要执行的操作。</li><li><strong>请求 URI</strong>（统一资源标识符）：请求的资源路径，通常包括主机名、端口号（如果非默认）、路径和查询字符串。</li><li><strong>HTTP 版本</strong>：如 HTTP/1.1 或 HTTP/2。</li></ul><p>请求行的格式示例：<code>GET /index.html HTTP/1.1</code></p><p><strong>请求头</strong>（Request Headers）：</p><ul><li><p>格式为key: value形式 </p></li><li><p>包含了客户端环境信息、请求体的大小（如果有）、客户端支持的压缩类型等。</p></li><li><p>常见的请求头包括<code>Host</code>、<code>User-Agent</code>、<code>Accept</code>、<code>Accept-Encoding</code>、<code>Content-Length</code>等。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Host: 表示请求的主机名</span><br><span class="line"></span><br><span class="line">User-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79 ，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko</span><br><span class="line"></span><br><span class="line">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；</span><br><span class="line"></span><br><span class="line">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</span><br><span class="line"></span><br><span class="line">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</span><br><span class="line"></span><br><span class="line">Content-Type：请求主体的数据类型</span><br><span class="line"></span><br><span class="line">Content-Length：数据主体的大小（单位：字节）</span><br></pre></td></tr></table></figure><p><strong>空行</strong>：</p><ul><li>请求头和请求体之间的分隔符，表示请求头的结束。</li></ul><p><strong>请求体</strong>（可选）：</p><ul><li><p>在某些类型的HTTP请求（如 POST 和 PUT）中，请求体包含要发送给服务器的数据。</p></li><li><p>GET请求中，请求参数放在了请求行中的地址中</p></li></ul><h3 id="在HTTP1-1版本中，浏览器访问服务器的几种方式："><a href="#在HTTP1-1版本中，浏览器访问服务器的几种方式：" class="headerlink" title="在HTTP1.1版本中，浏览器访问服务器的几种方式："></a>在HTTP1.1版本中，浏览器访问服务器的几种方式：</h3><div class="table-container"><table><thead><tr><th style="text-align:center">请求方式</th><th style="text-align:left">请求说明</th></tr></thead><tbody><tr><td style="text-align:center"><strong>GET</strong></td><td style="text-align:left">获取资源。<br/>向特定的资源发出请求。例：<a href="http://www.baidu.com/s?wd=http">http://www.baidu.com/s?wd=http</a></td></tr><tr><td style="text-align:center"><strong>POST</strong></td><td style="text-align:left">传输实体主体。<br/>向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。</td></tr><tr><td style="text-align:center">OPTIONS</td><td style="text-align:left">返回服务器针对特定资源所支持的HTTP请求方式。<br/>因为并不是所有的服务器都支持规定的方法，为了安全有些服务器可能会禁止掉一些方法，例如：DELETE、PUT等。那么OPTIONS就是用来询问服务器支持的方法。</td></tr><tr><td style="text-align:center">HEAD</td><td style="text-align:left">获得报文首部。<br/>HEAD方法类似GET方法，但是不同的是HEAD方法不要求返回数据。通常用于确认URI的有效性及资源更新时间等。</td></tr><tr><td style="text-align:center">PUT</td><td style="text-align:left">传输文件。<br/>PUT方法用来传输文件。类似FTP协议，文件内容包含在请求报文的实体中，然后请求保存到URL指定的服务器位置。</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:left">删除文件。<br/>请求服务器删除Request-URI所标识的资源</td></tr><tr><td style="text-align:center">TRACE</td><td style="text-align:left">追踪路径。<br/>回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td style="text-align:center">CONNECT</td><td style="text-align:left">要求用隧道协议连接代理。<br/>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器</td></tr></tbody></table></div><p>在我们实际应用中常用的也就是 ：<strong>GET、POST</strong></p><h3 id="GET请求和POST请求的区别："><a href="#GET请求和POST请求的区别：" class="headerlink" title="GET请求和POST请求的区别："></a>GET请求和POST请求的区别：</h3><div class="table-container"><table><thead><tr><th>区别方式</th><th>GET请求</th><th>POST请求</th></tr></thead><tbody><tr><td>请求参数</td><td>请求参数在请求行中。<br/>例：/brand/findAll?name=OPPO&amp;status=1</td><td>请求参数在请求体中</td></tr><tr><td>请求参数长度</td><td>请求参数长度有限制(浏览器不同限制也不同)</td><td>请求参数长度没有限制</td></tr><tr><td>安全性</td><td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td><td>安全性相对高</td></tr></tbody></table></div><h2 id="3-HTTP-响应协议"><a href="#3-HTTP-响应协议" class="headerlink" title="3.HTTP-响应协议"></a>3.HTTP-响应协议</h2><h3 id="一般格式"><a href="#一般格式" class="headerlink" title="一般格式"></a>一般格式</h3><p><img src="https://smartsageblogfile.oss-cn-beijing.aliyuncs.com/blogimages/202408072259815.jpg" alt=""> </p><p>服务器将数据以响应格式返回给浏览器，包括：<strong>状态行</strong> 、<strong>响应头</strong> 、<strong>空行</strong>、<strong>响应体</strong> </p><p><strong>状态行（Status Line）</strong></p><p>响应数据的第一行。响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</p><p><strong>响应头（Response Headers）</strong></p><p>响应数据的第二行开始。格式为key：value形式</p><p>常见的HTTP响应头有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg ；</span><br><span class="line"></span><br><span class="line">Content-Length：表示该响应内容的长度（字节数）；</span><br><span class="line"></span><br><span class="line">Content-Encoding：表示该响应压缩算法，例如gzip ；</span><br><span class="line"></span><br><span class="line">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒 ;</span><br><span class="line"></span><br><span class="line">Set-Cookie: 告诉浏览器为当前页面所在的域设置cookie ;</span><br></pre></td></tr></table></figure><p><strong>空行</strong></p><ul><li>响应头和响应体之间的分隔符，表示响应头的结束。</li></ul><p><strong>响应体（可选）：</strong></p><p>响应数据的最后一部分。存储响应的数据</p><ul><li>响应体和响应头之间有一个空行隔开（作用：用于标记响应头结束）</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to My Blog!</title>
      <link href="/2024/08/07/Welcome%20to%20My%20Blog/"/>
      <url>/2024/08/07/Welcome%20to%20My%20Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Welcome-to-My-Blog"><a href="#Welcome-to-My-Blog" class="headerlink" title="Welcome to My Blog!"></a>Welcome to My Blog!</h1><p><img src="https://smartsageblogfile.oss-cn-beijing.aliyuncs.com/blogimages/202408081222326.webp" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Welcome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Welcome </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
